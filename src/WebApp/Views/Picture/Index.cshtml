@using Microsoft.Extensions.Options;
@using WebApp.Infrastructure.Options;
@inject IOptions<AwsOptions> awsOptions;
@{
    ViewData["Title"] = "Upload Picture";
    var awsSettings = awsOptions.Value;

    string accessKey = awsSettings.AccessKey;
    string region = awsSettings.Region;
    string requestEndpoint = awsSettings.Endpoint;
    string bucket = awsSettings.Bucket;

    string clientId = "fineUploader_" + (new Random()).Next(1000, 9999);
}

<style>
    #fine-uploader-s3 .preview-link {
        display: block;
        height: 100%;
        width: 100%;
    }
</style>

<div class="text-center">

    <div class="row">
        <div class="col-md-12">
            <div id="@clientId" class="upload-image-button pull-left margin-t-5">
            </div>
        </div>
    </div>

    <script type="text/template" id="@(clientId)-qq-template-s3">
        <div class="qq-uploader-selector qq-uploader qq-gallery" qq-drop-area-text="Drop files here">
            <div class="qq-total-progress-bar-container-selector qq-total-progress-bar-container">
                <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"
                     class="qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar"></div>
            </div>
            <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
                <span class="qq-upload-drop-area-text-selector"></span>
            </div>
            <div class="qq-upload-button-selector qq-upload-button" id="@(clientId + "-uploadButton")">
                <div>Upload a file</div>
            </div>
            <span class="qq-drop-processing-selector qq-drop-processing">
                <span>Processing dropped files...</span>
                <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
            </span>
            <ul class="qq-upload-list-selector qq-upload-list" role="region" aria-live="polite" aria-relevant="additions removals">
                <li>
                    <span role="status" class="qq-upload-status-text-selector qq-upload-status-text"></span>
                    <div class="qq-progress-bar-container-selector qq-progress-bar-container">
                        <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>
                    </div>
                    <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                    <div class="qq-thumbnail-wrapper">
                        <a class="preview-link" target="_blank">
                            <img class="qq-thumbnail-selector" qq-max-size="150" qq-server-scale>
                        </a>
                    </div>
                    <button type="button" class="qq-upload-cancel-selector qq-upload-cancel">X</button>
                    <button type="button" class="qq-upload-retry-selector qq-upload-retry">
                        <span class="qq-btn qq-retry-icon" aria-label="Retry"></span>
                        Retry
                    </button>

                    <div class="qq-file-info">
                        <div class="qq-file-name">
                            <span class="qq-upload-file-selector qq-upload-file"></span>
                            <span class="qq-edit-filename-icon-selector qq-edit-filename-icon" aria-label="Edit filename"></span>
                        </div>
                        <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
                        <span class="qq-upload-size-selector qq-upload-size"></span>
                        <button type="button" class="qq-btn qq-upload-delete-selector qq-upload-delete" id="@(clientId + "delete")">
                            <span class="qq-btn qq-delete-icon" aria-label="Delete"></span>
                        </button>
                        <button type="button" class="qq-btn qq-upload-pause-selector qq-upload-pause">
                            <span class="qq-btn qq-pause-icon" aria-label="Pause"></span>
                        </button>
                        <button type="button" class="qq-btn qq-upload-continue-selector qq-upload-continue">
                            <span class="qq-btn qq-continue-icon" aria-label="Continue"></span>
                        </button>
                    </div>
                </li>
            </ul>

            <dialog class="qq-alert-dialog-selector">
                <div class="qq-dialog-message-selector"></div>
                <div class="qq-dialog-buttons">
                    <button type="button" class="qq-cancel-button-selector">Close</button>
                </div>
            </dialog>

            <dialog class="qq-confirm-dialog-selector">
                <div class="qq-dialog-message-selector"></div>
                <div class="qq-dialog-buttons">
                    <button type="button" class="qq-cancel-button-selector">No</button>
                    <button type="button" class="qq-ok-button-selector">Yes</button>
                </div>
            </dialog>

            <dialog class="qq-prompt-dialog-selector">
                <div class="qq-dialog-message-selector"></div>
                <input type="text">
                <div class="qq-dialog-buttons">
                    <button type="button" class="qq-cancel-button-selector">Cancel</button>
                    <button type="button" class="qq-ok-button-selector">Ok</button>
                </div>
            </dialog>
        </div>
    </script>

    <div class="row">
        <div class="col-md-12">
            <table class="table table-striped" id="fine-uploader-s3-table">
                <thead>
                    <tr>
                        <th scope="col"></th>
                        <th scope="col">Name</th>
                        <th scope="col">Delete</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>

</div>

<!--Processing Modal -->
<div class="modal fade" id="processingModel" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="text-center">
                    <img src="~/lib/file-uploader/processing.gif" />
                </div>
            </div>
        </div>
    </div>
</div>


@section CssSection
{
    <!-- Fine Uploader Gallery CSS file
    ====================================================================== -->
    <link href="~/lib/file-uploader/s3.jquery.fine-uploader/fine-uploader-gallery.min.css" rel="stylesheet">
}
@section Scripts
{
    <!-- Fine Uploader S3 JS file
    ====================================================================== -->
    <script src="~/lib/file-uploader/s3.jquery.fine-uploader/s3.jquery.fine-uploader.min.js"></script>
    <script type="text/javascript">
        $(function () {

            loadPictures();

            var @(clientId) = new qq.s3.FineUploader({
                element: document.getElementById("@clientId"),
                template: "@(clientId)-qq-template-s3",
                multiple: false,
                request: {
                    endpoint: "@requestEndpoint",
                    accessKey: "@accessKey"
                },
                objectProperties: {
                    bucket: "@bucket",
                    region: "@region",
                    key: function (id) {
                        var name = this.getName(id);
                        var fileName = renameFileAsFriendly(name);
                        this.setName(id, fileName);
                        return fileName;
                    }
                },
                signature: {
                    endpoint: '@(Url.Content("~/Picture/Signature"))',
                    version: 4
                },
                uploadSuccess: {
                    endpoint: '@(Url.Content("~/Picture/UploadSuccess"))',
                    params: {
                        isBrowserPreviewCapable: qq.supportedFeatures.imagePreviews,
                        myParam1: "my param 1",
                        myParam2: function () {
                            return "my param 2";
                        }
                    }
                },
                iframeSupport: {
                    localBlankPagePath: "/server/success.html"
                },
                cors: {
                    expected: true
                },
                chunking: {
                    enabled: false
                },
                resume: {
                    enabled: true
                },
                deleteFile: {
                    enabled: true,
                    method: "POST",
                    endpoint: '@(Url.Content("~/Picture/UploadDelete"))',
                    params: {
                        myParam1: "my param 1",
                        myParam2: function () {
                            return "my param 2";
                        }
                    }
                },
                validation: {
                    allowedExtensions: ['bmp', 'gif', 'jpeg', 'jpg', 'jpe', 'jfif', 'pjpeg', 'pjp', 'png', 'tiff', 'tif'],
                    itemLimit: 1,
                    //sizeLimit: 15000000
                },
                thumbnails: {
                    placeholders: {
                        notAvailablePath: "/lib/file-uploader/placeholders/not_available-generic.png",
                        waitingPath: "/lib/file-uploader/placeholders/waiting-generic.png"
                    }
                },
                callbacks: {
                    onSubmit: function (id, name) {
                        //var fileName = renameFile(name, "seoFileName");
                        //this.setName(id, fileName);
                    },
                    onComplete: function (id, name, response, xhr) {
                        if (response.success) {

                            addPictureTable(response.key);
                            @Html.Raw(clientId+".reset();")

                            //var previewLink = qq(this.getItemByFileId(id)).getByClass('preview-link')[0];
                            //previewLink.setAttribute("href", response.tempLink);
                        }

                        if (!response.success) {

                            var responseText = xhr.responseText;
                            if (response.errorMessage) {
                                responseText = response.errorMessage;
                            }

                            alert(responseText);
                        }
                    },
                    onDeleteComplete: function (id, name, errorReason, xhr) {
                        //to do
                    }
                }
            });
        });
    </script>
    <script type="text/javascript">
        function renameFileAsFriendly(name) {

            var nameWithoutExtension = name.substring(0, name.lastIndexOf('.'));
            var extension = name.substr((name.lastIndexOf('.') + 1));
            var date = new Date();
            var prefixName = date.getTime();

            var fileName = prefixName;
            fileName = fileName + "_" + toSeoUrl(nameWithoutExtension);
            fileName = fileName + "." + extension;

            return fileName;
        }
        function toSeoUrl(textString) {
            textString = textString
                .replace(/ /g, "-")
                .replace(/</g, "")
                .replace(/>/g, "")
                .replace(/"/g, "")
                .replace(/é/g, "")
                .replace(/!/g, "")
                .replace(/'/, "")
                .replace(/£/, "")
                .replace(/^/, "")
                .replace(/#/, "")
                .replace(/$/, "")
                .replace(/\+/g, "")
                .replace(/%/g, "")
                .replace(/½/g, "")
                .replace(/&/g, "")
                .replace(/\//g, "")
                .replace(/{/g, "")
                .replace(/\(/g, "")
                .replace(/\[/g, "")
                .replace(/\)/g, "")
                .replace(/]/g, "")
                .replace(/=/g, "")
                .replace(/}/g, "")
                .replace(/\?/g, "")
                .replace(/\*/g, "")
                .replace(/@@/g, "")
                .replace(/€/g, "")
                .replace(/~/g, "")
                .replace(/æ/g, "")
                .replace(/ß/g, "")
                .replace(/;/g, "")
                .replace(/,/g, "")
                .replace(/`/g, "")
                .replace(/|/g, "")
                .replace(/\./g, "")
                .replace(/:/g, "")
                .replace(/İ/g, "i")
                .replace(/I/g, "i")
                .replace(/ı/g, "i")
                .replace(/ğ/g, "g")
                .replace(/Ğ/g, "g")
                .replace(/ü/g, "u")
                .replace(/Ü/g, "u")
                .replace(/ş/g, "s")
                .replace(/Ş/g, "s")
                .replace(/ö/g, "o")
                .replace(/Ö/g, "o")
                .replace(/ç/g, "c")
                .replace(/Ç/g, "c")
                .replace(/--/g, "-")
                .replace(/---/g, "-")
                .replace(/----/g, "-")
                .replace(/----/g, "-");

            textString = textString.replace(/[^a-zA-Z 0-9-]+/g, '');
            textString = textString.substring(0, 50)

            return textString.toLowerCase();
        }
        function addPictureTable(key) {

            var td_picture_html = $("<td />", {
                scope: "row",
                html: $("<img />", {
                    src: "@awsOptions.Value.Endpoint/" + key,
                    style: "max-height:100px;width:auto;"
                })
            });
            var td_name_html = $("<td />", {
                html: key
            });
            var td_button_html = $("<td />", {
                html: $("<button />", {
                    class: "btn btn-danger",
                    html: "Delete",
                    onclick: "deletePicture(this, '" + key + "');"
                })
            });

            var tr_html =
                $("<tr />")
                .append(td_picture_html)
                .append(td_name_html)
                .append(td_button_html);

            $("#fine-uploader-s3-table > tbody").append(tr_html);
        }
        function loadPictures() {
            $.get("@(Url.Content("~/Picture/GetPictures"))", function (data) {
                $.each(data.pictures, function (index, value) {
                    addPictureTable(value);
                });
            });
        }
        function deletePicture(element, key) {

            $(element).attr("disabled", true);
            $('#processingModel').modal('show');

            $.ajax({
                type: "POST",
                url: "@(Url.Content("~/Picture/Delete"))",
                data: { key: key },
                cache: false,
                success: function (data) {
                    $('#processingModel').modal('hide');
                    if (data.success) {
                        $(element).closest("tr").remove();
                        return;
                    }
                    $(element).attr("disabled", false);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    $('#processingModel').modal('hide');
                    console.log(xhr.status);
                }
            });
        }
    </script>
}
